{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "Maistissa backend",
    "version" : "1.1.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8082/api"
  } ],
  "tags" : [ {
    "description" : "Operations available only for admin users.",
    "name" : "admin"
  }, {
    "description" : "Authentication operations. Only authenticated users are allowed to edit resources.",
    "name" : "authentication"
  }, {
    "description" : "CRUD operations for reviews.",
    "name" : "reviews-crud"
  }, {
    "description" : "Operations for finding information regarding reviews.",
    "name" : "reviews-info"
  }, {
    "description" : "Operations for finding reviews of specific wines.",
    "name" : "reviews-by-wine"
  }, {
    "description" : "Review search operations.",
    "name" : "reviews-search"
  }, {
    "description" : "CRUD operations for wines.",
    "name" : "wines-crud"
  }, {
    "description" : "Operations for finding information regarding wines.",
    "name" : "wines-info"
  }, {
    "description" : "Wine search operations.",
    "name" : "wines-search"
  } ],
  "paths" : {
    "/admin/users" : {
      "get" : {
        "description" : "Returns all registered users.",
        "operationId" : "getUsers",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "List of all users."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Get all registered users.",
        "tags" : [ "admin" ]
      }
    },
    "/admin/users/id/{id}" : {
      "get" : {
        "description" : "Returns a single user by id.",
        "operationId" : "findUserById",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Fetched a single user."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Get user by ID.",
        "tags" : [ "admin" ]
      },
      "parameters" : [ {
        "description" : "User ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/admin/users/username/{username}" : {
      "get" : {
        "description" : "Returns a single user by username.",
        "operationId" : "findUserByUsername",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Fetched a single user."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Get user by username.",
        "tags" : [ "admin" ]
      },
      "parameters" : [ {
        "description" : "User's username.",
        "in" : "path",
        "name" : "username",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/admin/users/{id}/roles" : {
      "parameters" : [ {
        "description" : "User ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ],
      "put" : {
        "description" : "Replace user's old roles with roles given in request body.",
        "operationId" : "updateRoles",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/Role"
                },
                "type" : "array",
                "uniqueItems" : true
              }
            }
          },
          "description" : "Set of new roles."
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Fetched a single user."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Update user's roles.",
        "tags" : [ "admin" ]
      }
    },
    "/auth/login" : {
      "post" : {
        "description" : "Login with valid username and password. On successful login, API returns a JWT token.",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCredentials"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JwtToken"
                }
              }
            },
            "description" : "Valid JWT token"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "summary" : "Login to receive JWT token.",
        "tags" : [ "authentication" ]
      }
    },
    "/auth/register" : {
      "post" : {
        "description" : "Register a new user with given username and password. User's default role is USER.",
        "operationId" : "register",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCredentials"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Newly created user resource."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 400. Request body was malformed."
          }
        },
        "summary" : "Register a new user.",
        "tags" : [ "authentication" ]
      }
    },
    "/reviews" : {
      "get" : {
        "description" : "Returns all reviews in descending order by date.",
        "operationId" : "getReviews",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Review"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of reviews."
          }
        },
        "summary" : "Get all reviews",
        "tags" : [ "reviews-crud" ]
      }
    },
    "/reviews/{id}" : {
      "delete" : {
        "description" : "Delete review.",
        "operationId" : "deleteReview",
        "responses" : {
          "204" : {
            "description" : "Successfully deleted review."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Delete review.",
        "tags" : [ "reviews-crud" ]
      },
      "get" : {
        "description" : "Get a single review.",
        "operationId" : "findReview",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Review"
                }
              }
            },
            "description" : "Fetched a single review."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "summary" : "Get a single review.",
        "tags" : [ "reviews-crud" ]
      },
      "parameters" : [ {
        "description" : "Review ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ],
      "put" : {
        "description" : "Update review.",
        "operationId" : "updateReview",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Review"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Review"
                }
              }
            },
            "description" : "Fetched a single review."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 400. Request body was malformed."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Update review.",
        "tags" : [ "reviews-crud" ]
      }
    },
    "/reviews/{wineId}" : {
      "parameters" : [ {
        "description" : "Wine that review is added for.",
        "in" : "path",
        "name" : "wineId",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ],
      "post" : {
        "description" : "Add new review. Must give Wine ID as path parameter to indicate the wine that the review is for.",
        "operationId" : "addReview",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Review"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Review"
                }
              }
            },
            "description" : "Fetched a single review."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 400. Request body was malformed."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Add new review.",
        "tags" : [ "reviews-crud" ]
      }
    },
    "/reviews/{id}/editable" : {
      "get" : {
        "description" : "Does the user have permission to edit the resource?",
        "operationId" : "isReviewEditable",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            },
            "description" : "Boolean indicating if review can be edited by user."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "summary" : "Is review editable?",
        "tags" : [ "reviews-crud" ]
      },
      "parameters" : [ {
        "description" : "Review ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/reviews/wine/name/{wineName}" : {
      "get" : {
        "description" : "Get all reviews for a certain wine. Search by wine name.",
        "operationId" : "findReviewByWineName",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Review"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of reviews."
          }
        },
        "summary" : "Get reviews for wine by wine name.",
        "tags" : [ "reviews-by-wine" ]
      },
      "parameters" : [ {
        "description" : "Wine name.",
        "in" : "path",
        "name" : "wineName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/reviews/wine/id/{wineId}" : {
      "get" : {
        "description" : "Get all reviews for a certain wine. Search by wine ID.",
        "operationId" : "findReviewByWineId",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Review"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of reviews."
          }
        },
        "summary" : "Get reviews for wine by wine ID.",
        "tags" : [ "reviews-by-wine" ]
      },
      "parameters" : [ {
        "description" : "Wine ID.",
        "in" : "path",
        "name" : "wineId",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/reviews/count" : {
      "get" : {
        "description" : "Returns total count of reviews in the application.",
        "operationId" : "reviewCount",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer"
                }
              }
            },
            "description" : "Total review count."
          }
        },
        "summary" : "Get review count",
        "tags" : [ "reviews-info" ]
      }
    },
    "/reviews/search" : {
      "get" : {
        "description" : "Search for reviews based on their author, date and rating.",
        "operationId" : "reviewSearch",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Review"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of reviews."
          }
        },
        "summary" : "Search reviews",
        "tags" : [ "reviews-search" ]
      },
      "parameters" : [ {
        "description" : "Review author's name.",
        "in" : "query",
        "name" : "author",
        "schema" : {
          "type" : "string"
        }
      }, {
        "description" : "Month range for reviews.",
        "examples" : {
          "validRange" : {
            "value" : [ "2020-01", "2020-02" ]
          }
        },
        "in" : "query",
        "name" : "dateRange",
        "schema" : {
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2,
          "minItems" : 0,
          "type" : "array"
        }
      }, {
        "description" : "Rating range for reviews.",
        "in" : "query",
        "name" : "ratingRange",
        "schema" : {
          "items" : {
            "format" : "double",
            "type" : "number"
          },
          "maxItems" : 2,
          "minItems" : 0,
          "type" : "array"
        }
      } ]
    },
    "/reviews/search/best" : {
      "get" : {
        "description" : "Get best rated reviews. Number of reviews can be given as request parameter, default amount is 10.",
        "operationId" : "searchBestReview",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Review"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of reviews."
          }
        },
        "summary" : "Get best reviews.",
        "tags" : [ "reviews-search" ]
      },
      "parameters" : [ {
        "description" : "Max number of results to fetch.",
        "in" : "query",
        "name" : "limit",
        "schema" : {
          "default" : 10,
          "type" : "integer"
        }
      } ]
    },
    "/reviews/search/newest" : {
      "get" : {
        "description" : "Get newest reviews. Number of reviews can be given as request parameter, default amount is 10.",
        "operationId" : "searchNewestReview",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Review"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of reviews."
          }
        },
        "summary" : "Get newest reviews.",
        "tags" : [ "reviews-search" ]
      },
      "parameters" : [ {
        "description" : "Max number of results to fetch.",
        "in" : "query",
        "name" : "limit",
        "schema" : {
          "default" : 10,
          "type" : "integer"
        }
      } ]
    },
    "/reviews/search/worst" : {
      "get" : {
        "description" : "Get worst rated reviews. Number of reviews can be given as request parameter, default amount is 10.",
        "operationId" : "searchWorstReview",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Review"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of reviews."
          }
        },
        "summary" : "Get worst reviews.",
        "tags" : [ "reviews-search" ]
      },
      "parameters" : [ {
        "description" : "Max number of results to fetch.",
        "in" : "query",
        "name" : "limit",
        "schema" : {
          "default" : 10,
          "type" : "integer"
        }
      } ]
    },
    "/wines" : {
      "get" : {
        "description" : "Returns all wines ordered alphabetically by name.",
        "operationId" : "getWines",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Wine"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of wines."
          }
        },
        "summary" : "Get all wines.",
        "tags" : [ "wines-crud" ]
      },
      "post" : {
        "description" : "Add new wine.",
        "operationId" : "addWine",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Wine"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Wine"
                }
              }
            },
            "description" : "Fetched a single wine."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 400. Request body was malformed."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Add new wine.",
        "tags" : [ "wines-crud" ]
      }
    },
    "/wines/{id}" : {
      "delete" : {
        "description" : "Delete wine.",
        "operationId" : "deleteWine",
        "responses" : {
          "204" : {
            "description" : "Successfully deleted wine."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Delete wine.",
        "tags" : [ "wines-crud" ]
      },
      "get" : {
        "description" : "Get a single wine.",
        "operationId" : "findWine",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Wine"
                }
              }
            },
            "description" : "Fetched a single wine."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "summary" : "Get a single wine.",
        "tags" : [ "wines-crud" ]
      },
      "parameters" : [ {
        "description" : "Wine ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ],
      "put" : {
        "description" : "Update wine.",
        "operationId" : "updateWine",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Wine"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Wine"
                }
              }
            },
            "description" : "Fetched a single wine."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 400. Request body was malformed."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 401. Request was unauthorized."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "Update wine.",
        "tags" : [ "wines-crud" ]
      }
    },
    "/wines/{id}/editable" : {
      "get" : {
        "description" : "Does the user have permission to edit the resource?",
        "operationId" : "isWineEditable",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            },
            "description" : "Boolean indicating if wine can be edited by user."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "HTTP 404. Could not find resource with given id."
          }
        },
        "summary" : "Is wine editable?",
        "tags" : [ "wines-crud" ]
      },
      "parameters" : [ {
        "description" : "Wine ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/wines/count" : {
      "get" : {
        "description" : "Returns total count of wines in the application.",
        "operationId" : "wineCount",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer"
                }
              }
            },
            "description" : "Total wine count."
          }
        },
        "summary" : "Get wine count.",
        "tags" : [ "wines-info" ]
      }
    },
    "/wines/countries" : {
      "get" : {
        "description" : "Returns list of all distinct countries found in all wines.",
        "operationId" : "findCountries",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of strings."
          }
        },
        "summary" : "Get list of distinct countries.",
        "tags" : [ "wines-info" ]
      }
    },
    "/wines/descriptions" : {
      "get" : {
        "description" : "Returns list of all distinct wine descriptions found as wine attributes.",
        "operationId" : "findDescriptions",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of strings."
          }
        },
        "summary" : "Get list of distinct wine descriptions.",
        "tags" : [ "wines-info" ]
      }
    },
    "/wines/food-pairings" : {
      "get" : {
        "description" : "Returns list of all distinct wine-food pairings found as wine attributes.",
        "operationId" : "findFoodPairings",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of strings."
          }
        },
        "summary" : "Get list of distinct food pairings.",
        "tags" : [ "wines-info" ]
      }
    },
    "/wines/validate" : {
      "get" : {
        "description" : "Check that wine's name is unique. TODO change to POST.",
        "operationId" : "validateWineName",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            },
            "description" : "Checked if wine's name is unique."
          }
        },
        "summary" : "Validate wine's name.",
        "tags" : [ "wines-info" ]
      },
      "parameters" : [ {
        "description" : "Wine name to validate.",
        "in" : "query",
        "name" : "name",
        "required" : true,
        "schema" : {
          "minLength" : 1,
          "type" : "string"
        }
      } ]
    },
    "/wines/search" : {
      "get" : {
        "description" : "Search for wines based on their name, type, countries, volumes and prices.",
        "operationId" : "wineSearch",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Wine"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Fetched a list of wines."
          }
        },
        "summary" : "Search wines.",
        "tags" : [ "wines-search" ]
      },
      "parameters" : [ {
        "description" : "Wine name.",
        "in" : "query",
        "name" : "name",
        "schema" : {
          "type" : "string"
        }
      }, {
        "description" : "Wine type.",
        "in" : "query",
        "name" : "type",
        "schema" : {
          "enum" : [ "RED", "ROSE", "WHITE", "SPARKLING", "OTHER" ],
          "type" : "string"
        }
      }, {
        "description" : "List of countries.",
        "in" : "query",
        "name" : "countries",
        "schema" : {
          "items" : {
            "type" : "string"
          },
          "minItems" : 0,
          "type" : "array"
        }
      }, {
        "description" : "List of volumes (i.e. wine's package size).",
        "in" : "query",
        "name" : "volumes",
        "schema" : {
          "items" : {
            "format" : "double",
            "type" : "number"
          },
          "minimum" : 0,
          "type" : "array"
        }
      }, {
        "description" : "Desired price range, given as [min, max]. Must have exactly two values.",
        "in" : "query",
        "name" : "priceRange",
        "schema" : {
          "items" : {
            "format" : "double",
            "type" : "number"
          },
          "maximum" : 2,
          "minimum" : 2,
          "type" : "array"
        }
      } ]
    }
  },
  "components" : {
    "schemas" : {
      "ErrorBody" : {
        "description" : "A generic error response.",
        "properties" : {
          "timestamp" : {
            "format" : "datetime",
            "type" : "string"
          },
          "status" : {
            "type" : "integer"
          },
          "error" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "JwtToken" : {
        "description" : "A JWT resource with token string and type Bearer.",
        "properties" : {
          "token" : {
            "format" : "jwt",
            "type" : "string"
          },
          "type" : {
            "default" : "Bearer",
            "type" : "string"
          }
        },
        "required" : [ "token", "type" ],
        "type" : "object"
      },
      "Review" : {
        "description" : "A review resource.",
        "properties" : {
          "id" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          },
          "author" : {
            "minLength" : 1,
            "type" : "string"
          },
          "date" : {
            "format" : "date",
            "type" : "string"
          },
          "reviewText" : {
            "minLength" : 0,
            "type" : "string"
          },
          "rating" : {
            "format" : "double",
            "maximum" : 5,
            "minimum" : 0,
            "type" : "number"
          },
          "wine" : {
            "$ref" : "#/components/schemas/Wine"
          }
        },
        "required" : [ "author", "date", "id", "rating" ],
        "type" : "object"
      },
      "Role" : {
        "description" : "User's role.",
        "enum" : [ "ROLE_GUEST", "ROLE_USER", "ROLE_ADMIN" ],
        "type" : "string"
      },
      "User" : {
        "description" : "A logged-in user with username and user roles.",
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
          },
          "username" : {
            "type" : "string"
          },
          "password" : {
            "minLength" : 6,
            "type" : "string",
            "writeOnly" : true
          },
          "roles" : {
            "items" : {
              "$ref" : "#/components/schemas/Role"
            },
            "type" : "array",
            "uniqueItems" : true
          }
        },
        "required" : [ "id", "password", "roles", "username" ],
        "type" : "object"
      },
      "UserCredentials" : {
        "description" : "User's login credentials with username and password.",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "password" : {
            "minLength" : 6,
            "type" : "string"
          }
        },
        "required" : [ "password", "username" ],
        "type" : "object"
      },
      "Wine" : {
        "description" : "A wine resource.",
        "properties" : {
          "id" : {
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          },
          "name" : {
            "minLength" : 1,
            "type" : "string"
          },
          "type" : {
            "enum" : [ "RED", "ROSE", "WHITE", "SPARKLING", "OTHER" ],
            "type" : "string"
          },
          "country" : {
            "minLength" : 1,
            "type" : "string"
          },
          "price" : {
            "format" : "double",
            "minimum" : 0,
            "type" : "number"
          },
          "volume" : {
            "format" : "double",
            "minimum" : 0,
            "type" : "number"
          },
          "description" : {
            "description" : "Wine's description contains a list of keywords or phrases.",
            "items" : {
              "type" : "string"
            },
            "minLength" : 0,
            "type" : "array"
          },
          "foodPairings" : {
            "description" : "Food pairing recommendations.",
            "items" : {
              "type" : "string"
            },
            "minLength" : 0,
            "type" : "array"
          },
          "url" : {
            "description" : "Link to external resource about the wine.",
            "format" : "url",
            "type" : "string"
          }
        },
        "required" : [ "country", "description", "foodPairings", "id", "name", "price", "type", "volume" ],
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      }
    }
  }
}